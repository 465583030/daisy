// Code generated by go-bindata.
// sources:
// bindata/genesis.db
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _bindataGenesisDb = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x56\x4d\x6f\x1c\x45\x13\xee\xd9\x5e\xfb\x7d\x63\x2b\x8a\x2c\x05\x19\x11\x09\xf5\xcd\x59\x29\x93\xf4\xd7\x74\xf7\x44\x42\xca\x26\x58\x04\xd9\x04\xe3\x98\x28\x39\x59\xfd\x51\x6d\x8f\xbc\xbb\x63\x76\x66\xad\xec\x81\xc3\x3a\x0a\x77\xc4\x7f\xe0\xcc\x91\x3f\xc0\x91\x03\xbf\x82\x33\x37\x8e\x68\x67\x9d\x64\xe3\x10\x88\x14\x24\x83\xe2\xe7\x30\xb3\x5d\x3b\xf5\xd4\x53\x5d\x35\xd5\x73\xff\x8b\xcd\xa2\x06\x12\xcb\x61\xdf\xd6\x44\xa0\x36\x4a\x12\x74\x8b\x10\x84\xd0\x32\x42\x68\x01\xbd\x40\x0b\x21\xd4\x9e\x5b\x27\xe8\xef\xb1\x8c\xd2\xdf\x7e\xbc\x88\x7f\x47\xed\xe4\x18\xe1\x87\xf8\xe7\xe4\x18\xa7\x6f\xe0\xf7\x0e\xe1\xc9\x55\xfc\xbf\xd5\xd5\xd5\xe4\x9b\x1b\xb5\x75\x3d\xd8\x3d\x80\x71\xd5\x5c\xda\x77\xb6\xd7\xbb\x3b\xeb\x64\xa7\x7b\x7b\x73\x9d\x34\x26\x72\x75\x89\x10\x42\xca\x43\xf2\x12\xee\xdc\xed\x6e\x93\x7b\x9f\xef\x90\x7b\x5f\x6e\x6e\x5e\x9b\xd9\xd2\x94\xac\x75\xd7\xa6\x85\x25\x36\x84\x62\xb0\x77\x8d\xac\x6d\xcf\xd6\x43\x38\x2a\x0f\x8a\xc1\x5e\xc3\x75\x38\x72\x07\x30\xde\xdd\xb7\xd5\x7e\xe3\xf7\xa0\xbb\xfd\x0a\x5d\x9a\x92\x62\x40\xea\xfd\xe7\x7d\xb2\x56\x8f\x0f\xe1\xe6\x3e\x3c\x5e\x9b\xe3\x78\xa1\xe7\x35\x1c\xfb\xf0\x38\x85\x81\x2f\x03\x84\xc6\xad\x2a\xf6\xde\x24\x74\x65\xfb\xcf\x03\xdb\x6a\x5e\xf0\x33\x96\x81\xad\x47\x43\x78\x5d\xf0\xe6\xa9\x3e\xd4\x36\xd8\xda\x9e\x92\x38\xfb\x73\x6b\xfb\xd3\xcf\xba\xdb\x8f\xc8\xc6\xfa\x23\x72\x75\x8e\xff\xda\xbc\xc4\xce\x52\xa7\xd3\x5e\x5c\xfd\x68\x35\x41\xc5\x20\xc0\xe3\xea\xab\x5e\x51\xc3\xae\x1d\xd5\x65\xb3\xde\x9d\x55\x8e\x35\xb7\x85\x2a\x69\x8a\x3a\x59\x9f\x15\x75\x1a\xbe\xb9\xb4\x5e\x2e\xea\xd4\x74\x52\xd4\xf9\x1d\x3c\x9d\xc3\xbc\xc2\x99\xe4\x23\xdb\x1b\x9d\xca\x78\xa9\xd3\x69\xfd\xa5\xbe\x46\x04\x6b\x6e\x18\x21\xf4\xff\x69\xf7\x5d\x44\x08\x2d\xb6\x36\x10\xfe\x0e\x7f\x8d\x6d\xeb\x87\xd6\xc3\xd6\xc6\x59\xbf\x11\xe7\xf8\x4f\x62\x79\x11\x5f\xb9\xf4\x00\x86\x55\x51\x0e\xd8\x83\x85\x76\x3a\x59\xb9\x33\x04\x5b\x97\xc3\xad\x91\xeb\x15\x7e\x03\xc6\xec\xa6\x15\x9e\x6a\x88\xca\x3b\x00\x2e\x55\xe4\x82\x59\xc5\x62\x14\xca\x39\x1f\x0c\x98\x4c\x09\xcd\x05\x08\x4d\x05\x38\x21\x33\xf0\x21\xe4\x42\x04\xad\x69\x6e\x81\x4f\xae\xb7\xdb\xdd\xe3\x74\x6b\x08\x47\x45\x39\xaa\x6e\xf7\x4a\x7f\x70\xd7\x56\xfb\xf7\x9f\x4d\x01\x41\xa5\xa2\x9c\x33\x4a\xbd\x66\x60\x0c\x80\x0a\x2e\x48\x21\x34\xf5\xdc\xe7\x86\x53\xc1\x8c\x54\x21\x08\x6d\xb5\x92\x41\x08\x06\x0a\x9c\x56\x39\x44\xae\x74\x16\x84\x89\x36\xe3\x22\xca\x19\x8b\x09\x4e\x98\x9c\xe6\x91\x73\x99\x73\x9d\x5b\x9f\xd1\x60\x9d\x91\xd2\x00\x30\x6d\x82\x54\x51\x39\x06\x51\x71\x2f\x81\x7a\xc6\x7c\x6e\x19\x38\xb0\x56\xe5\xb9\x52\x1f\x60\x7c\x25\x3d\xd9\x87\xe2\xa8\x1c\xda\xea\xd6\x5e\xdf\x16\xbd\xeb\xbe\xec\x5f\x6e\xe1\x1b\x17\x5f\x49\xe5\x20\x69\xeb\x09\xfb\x04\x06\x50\x15\xd5\xbd\x26\xa9\xbb\x60\x43\xaf\x18\x00\xa7\x4c\xa7\x54\xa6\xdc\xdc\x24\x5b\xd5\xd8\xef\x43\x80\x5e\xe1\x89\x2f\xfb\x87\xe5\x68\x10\xa6\x63\x1a\x7c\x55\xdb\x6a\x4c\xfa\xe5\x11\x54\xc4\xf7\xca\x0a\x86\xa4\x2e\x89\x3d\x3c\x1c\x96\x47\xb6\x37\xfd\x5d\x4f\xf5\x90\xad\x9d\xfb\x1f\x2f\x4d\xdf\x7f\xfc\x14\xe1\x9f\xf0\xb7\xf8\x57\xfc\x0b\xfe\x1e\x3f\x3d\xeb\x46\x3a\xc7\x39\xde\x29\x2c\xe3\x2b\xc9\xc9\xe0\x5c\xbc\x8c\xd3\xe4\xf4\xd8\x5c\xf8\x10\x77\x93\xd7\x8f\xbc\xf6\xd4\xff\xc4\x07\xbf\x87\x6f\xbc\xfa\x68\xeb\x7d\xac\x2f\xfc\xe9\x44\x99\x9e\xff\x49\xab\x83\x5a\x9d\xb3\xde\x84\x73\xfc\xab\xf1\x64\x27\x59\xbe\x34\x59\x39\x1e\x4f\x56\x8e\x3b\xa8\xfb\xf6\x27\xb9\xa0\x59\x2e\x28\x13\x54\x51\xcd\xad\x51\xd2\x78\x10\x81\x72\xca\xa8\xa2\x66\xce\x22\x28\xa3\x9a\x0a\xc9\x29\xa5\x52\x7b\xaa\x85\x15\x19\x0b\x9c\x99\x90\x33\xe6\x81\x9b\xa0\x33\x2a\xa4\x16\xc6\xb8\x20\xb2\x0c\x44\xb0\x3e\x0b\xc0\x62\x2e\x40\x4a\x15\x2d\x8f\xca\x70\x19\x8c\xcb\xa4\x31\xd2\x03\x80\x35\x8c\x9a\x5c\xe6\x99\x03\x17\x54\x08\x21\x3a\x4e\xb9\x88\x9a\x69\x2b\x64\xa4\x2a\xb3\xca\xe6\xda\x1b\xe1\xa2\xe2\xc2\x80\x67\x41\x33\xe9\xff\x89\xbc\x65\x36\xfb\xb4\x88\x59\xae\x84\xce\x79\xee\x29\x83\xe8\xb5\x71\x06\x98\x93\x3c\x64\x9a\x33\x2b\x95\xf6\x5a\x73\x95\x7b\xe9\xa3\x0a\x4c\x50\x4a\x19\xa3\x31\x57\x5e\x7a\x16\x39\xf5\x94\x73\xca\xa9\x70\x5e\x65\x19\xb7\xd1\x2b\xef\x34\xcb\x78\xe4\x3a\x4a\xee\x15\x63\x32\x1a\xb0\x9c\xba\xc8\xa4\x0a\xd4\x51\x43\xa5\x93\xd2\x05\x29\x85\x55\x91\xc6\xdc\x98\xe9\xf9\x9f\xe0\x1a\xe1\xfa\xac\x1b\xec\x1c\xe7\x78\x37\x30\x59\x5a\x9c\xac\x4c\x56\x2e\xbc\xfd\x2c\x79\x7b\x86\x3f\x02\x00\x00\xff\xff\x59\x63\x8c\xe2\x00\x14\x00\x00")

func bindataGenesisDbBytes() ([]byte, error) {
	return bindataRead(
		_bindataGenesisDb,
		"bindata/genesis.db",
	)
}

func bindataGenesisDb() (*asset, error) {
	bytes, err := bindataGenesisDbBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "bindata/genesis.db", size: 5120, mode: os.FileMode(420), modTime: time.Unix(1493463105, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"bindata/genesis.db": bindataGenesisDb,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"bindata": &bintree{nil, map[string]*bintree{
		"genesis.db": &bintree{bindataGenesisDb, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

