// Code generated by go-bindata.
// sources:
// bindata/genesis.db
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _bindataGenesisDb = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x95\x4f\x6f\x1b\xc5\x1b\xc7\x67\x3d\x6e\x7f\x6d\xaa\xe8\xa7\x48\xa0\x20\x7a\x99\x5b\x62\x29\x26\xf3\x6f\x67\x66\x23\x21\xd5\x0d\x11\x41\x84\x10\xdc\x80\xe8\x29\x9a\x9d\x79\x26\x5e\xf9\xcf\x1a\xef\xda\x8a\x0f\x1c\x9c\x4a\xbc\x01\xde\x0c\x6f\xa0\x47\x0e\xbc\x0a\xce\xdc\x38\x22\xaf\x43\xeb\xa6\x14\x8a\x8a\x14\x44\xfd\x39\xec\x7a\x1e\xef\x3c\xcf\xf7\x99\x67\xe6\x99\x47\x5f\x1c\x65\x25\x90\x90\x8f\xfa\xb6\x24\x02\xd5\x51\x14\xa1\x07\x84\x20\x84\xee\x20\x84\x6e\xa1\xe7\xd4\x10\x42\xf5\xa5\x71\x84\xfe\x9a\x3b\xa8\xf9\xcb\x0f\xeb\xf8\x57\x54\x8f\x2e\x11\xfe\x1a\xff\x18\x5d\xe2\xe6\x6b\xcc\x7b\x8b\x78\xb2\x8d\xff\xb7\xb9\xb9\x19\x7d\xb7\x5b\xda\xb4\x07\x67\x5d\x98\x16\xd5\xa3\xbe\xdf\x3e\x68\x9d\x1e\x90\xd3\xd6\xc3\xa3\x03\x52\x99\xc8\xf6\x1a\x21\x84\xe4\x43\xf2\x02\xfb\x87\xad\x36\x39\xfe\xfc\x94\x1c\x7f\x79\x74\xb4\xb3\xb0\x35\x9b\x64\xab\xb5\x35\x2f\x2c\xb1\xde\x67\x83\xf3\x1d\xb2\xd5\x5e\x8c\x47\x30\xc9\xbb\xd9\xe0\xbc\xf2\x35\x1c\xa7\x5d\x98\x9e\x75\x6c\xd1\xa9\xe6\x7d\xd5\x6a\xbf\xe4\xae\xd9\x24\xd9\x80\x94\x9d\x67\xfb\x64\xab\x9c\x0e\x61\xaf\x03\x17\x5b\x4b\x3e\x9e\xeb\x79\x85\x8f\x0e\x5c\x34\x61\xe0\x72\x0f\xbe\x9a\x56\x64\xe7\xaf\x13\xba\xb0\xfd\x67\x81\x6d\xb1\x2c\xf8\x77\x2f\x03\x5b\x8e\x47\xf0\xaa\xe0\xd5\x57\x7d\x28\xad\xb7\xa5\xbd\x26\x71\xf1\xe7\x49\xfb\x93\xcf\x5a\xed\xc7\xe4\xd3\x83\xc7\x64\x7b\xc9\xff\xce\xb2\xc4\xc6\x5a\xa3\x51\xbf\xbd\xf9\xe1\x66\x84\xb2\x81\x87\x8b\xe2\x9b\x5e\x56\xc2\x99\x1d\x97\x79\x35\x3e\x5b\x54\x8e\x55\xaf\x5b\x45\x54\x15\x75\x76\xb0\x28\xea\x3c\x7c\xf5\xa8\xbd\x58\xd4\xb9\xe9\xaa\xa8\xcb\x2b\x78\x3d\x87\x65\x85\x0b\xc9\x13\xdb\x1b\x5f\xcb\x78\xad\xd1\xa8\xfd\xa9\xbe\x4a\x04\xab\x5e\xf8\xea\x7c\xa3\x75\x84\x10\xc6\x16\xe1\xef\xf1\xb7\xd8\xde\xf4\x59\x58\xb1\xe2\x3f\xc6\xfb\x18\xdf\x6f\xee\x8f\xc0\x96\xf9\x28\x9b\xe4\x23\x5b\x3c\x38\xef\xdb\xac\xf7\x81\xcb\xfb\xef\xd4\xf0\xee\xfa\xc9\x08\x26\x59\x3e\x2e\x1e\xf6\x72\xd7\x3d\xb4\x45\xa7\x1b\xd5\xf5\x8c\x7d\x0c\x03\x28\xb2\xe2\xb8\x6a\x6d\x87\x60\x7d\x2f\x1b\x00\xa7\x4c\x37\xa9\x6c\x72\xb3\x47\x4e\x8a\xa9\xeb\x80\x87\x5e\xe6\x88\xcb\xfb\xc3\x7c\x3c\xf0\xf3\x36\x0d\xae\x28\x6d\x31\x25\xfd\x7c\x02\x05\x71\xbd\xbc\x80\x11\x29\x73\x62\x87\xc3\x51\x3e\xb1\xbd\xf9\xef\x72\xae\x87\x9c\x9c\x3e\xfa\x68\xad\x3a\xff\x4f\x11\x7e\x8a\x7f\xc6\x3f\xdd\xf4\x62\xad\x58\xb1\xe2\x6f\x73\x0f\xdf\x8f\xae\x5a\x0c\x7e\x17\xef\x46\x2f\xb5\x94\xda\x7b\x58\xdf\xfd\xc3\x8e\x32\xbf\xff\xa3\x5a\x03\xd5\x1a\x37\x9d\xc4\x8a\x7f\x35\x4f\x4e\xa3\x7b\xff\x9f\x6d\x5c\x4e\x67\x1b\x97\x0d\xd4\x62\x7b\x56\x38\xaa\x21\x28\x97\x02\x70\xa9\x02\x17\xcc\x2a\x16\x82\x50\x69\xea\xbc\x01\x13\x2b\xa1\xb9\x00\xa1\xa9\x80\x54\xc8\x18\x9c\xf7\x89\x10\x5e\x6b\x9a\x58\xe0\x82\xc6\x89\xa0\x4c\x50\x45\x35\xb7\x46\x49\xe3\x40\x78\xca\x29\xa3\x8a\x9a\x25\x8b\xa0\x8c\x6a\x2a\x24\xa7\x94\x4a\xed\xa8\x16\x56\xc4\xcc\x73\x66\x7c\xc2\x98\x03\x6e\xbc\x8e\xa9\x90\x5a\x18\x93\x7a\x11\xc7\x20\xbc\x75\xb1\x07\x16\x12\x01\x52\xaa\x60\x79\x50\x86\x4b\x6f\xd2\x58\x1a\x23\x1d\x00\x58\xc3\xa8\x49\x64\x12\xa7\x90\x7a\xe5\xbd\x0f\x29\xa7\x5c\x04\xcd\xb4\x15\x32\x50\x15\x5b\x65\x13\xed\x8c\x48\x83\xe2\xc2\x80\x63\x5e\x33\xe9\xfe\x89\xbc\x65\x4c\x39\x67\x94\x86\x38\x51\x42\x27\x3c\x71\x94\x41\x70\xda\xa4\x06\x58\x2a\xb9\x8f\x35\x67\x56\x2a\xed\xb4\xe6\x2a\x71\xd2\x05\xe5\x99\xa0\x94\x32\x46\x43\xa2\x9c\x74\x2c\x70\xea\x28\xe7\x94\x53\x91\x3a\x15\xc7\xdc\x06\xa7\x5c\xaa\x59\xcc\x03\xd7\x41\x72\xa7\x18\x93\xc1\x80\xe5\x34\x0d\x4c\x2a\x4f\x53\x6a\xa8\x4c\xa5\x4c\xbd\x94\xc2\xaa\x40\x43\x62\xcc\xfc\xfe\x8f\x70\x89\x70\x79\xd3\x1b\x6c\xc5\x8a\xb7\x83\xd9\xda\xed\xd9\xc6\x6c\xe3\xee\x9b\xf7\x92\x37\xf7\xf0\x5b\x00\x00\x00\xff\xff\x12\x9b\x74\x29\x00\x14\x00\x00")

func bindataGenesisDbBytes() ([]byte, error) {
	return bindataRead(
		_bindataGenesisDb,
		"bindata/genesis.db",
	)
}

func bindataGenesisDb() (*asset, error) {
	bytes, err := bindataGenesisDbBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "bindata/genesis.db", size: 5120, mode: os.FileMode(420), modTime: time.Unix(1493428876, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"bindata/genesis.db": bindataGenesisDb,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"bindata": &bintree{nil, map[string]*bintree{
		"genesis.db": &bintree{bindataGenesisDb, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

