// Code generated by go-bindata.
// sources:
// bindata/genesis.db
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _bindataGenesisDb = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x56\x4d\x6f\x1c\x45\x13\xee\xd9\x5e\xe7\x7d\xe3\x28\x42\x96\x82\x8c\x88\x84\xfa\xe6\xac\x94\x49\xfa\x6b\xba\x7b\x22\x21\x65\x13\x2c\x82\x62\x82\x71\x4c\x94\x9c\xac\xfe\xa8\xf6\x8e\xbc\xbb\x63\x76\x66\xad\xec\x81\xc3\x3a\x12\xf7\x88\xff\xc0\x99\x23\x7f\x80\x23\x07\x7e\x05\x67\x6e\x1c\xd1\xce\xe6\x63\xe3\x10\x88\x14\x24\x23\xbc\xcf\x61\x66\xbb\x77\xea\xa9\xa7\xa6\xaa\xab\xe6\xfe\x97\x5b\x45\x0d\x24\x96\xa3\x81\xad\x89\x40\x6d\x94\x24\xe8\x26\x21\x08\xa1\x55\x84\xd0\x0a\x7a\x89\x16\x42\xa8\xbd\xb0\x4e\xd0\xdf\x63\x15\xa5\xbf\xfd\x78\x11\xff\x8e\xda\xc9\x31\xc2\x0f\xf1\xcf\xc9\x31\x4e\xdf\xc2\xee\x0c\xe1\xc9\x15\xfc\xbf\xf5\xf5\xf5\xe4\xdb\xeb\xb5\x75\x7d\xd8\x3b\x80\x49\xd5\x5c\xda\xb7\x77\x36\xbb\xbb\x9b\x64\xb7\x7b\x6b\x6b\x93\x34\x5b\xe4\xca\x2a\x21\x84\x94\x87\xe4\x15\xdc\xbe\xd3\xdd\x21\xf7\xbe\xd8\x25\xf7\xbe\xda\xda\xba\x3a\xdf\x4b\x53\xb2\xd1\xdd\x98\x25\x96\xd8\x10\x8a\xe1\xfe\x55\xb2\xb1\x33\x5f\x8f\xe0\xa8\x3c\x28\x86\xfb\x0d\xd7\xe1\xd8\x1d\xc0\x64\xaf\x67\xab\x5e\x63\xf7\xa0\xbb\xf3\x1a\x5d\x9a\x92\x62\x48\xea\xde\x8b\x3a\xd9\xa8\x27\x87\x70\xa3\x07\x8f\x37\x16\x38\x5e\xea\x79\x03\x47\x0f\x1e\xa7\x30\xf4\x65\x80\xd0\x98\x55\xc5\xfe\xdb\xb8\xae\xec\xe0\x85\x63\x5b\x2d\x0a\x7e\xce\x32\xb4\xf5\x78\x04\x6f\x72\xde\x3c\x35\x80\xda\x06\x5b\xdb\x13\x12\xe7\x7f\x6e\xef\x7c\xf6\x79\x77\xe7\x11\xb9\xbb\xf9\x88\x5c\x59\xe0\xbf\xba\x28\xb1\xb3\xda\xe9\xb4\xcf\xad\x7f\xbc\x9e\xa0\x62\x18\xe0\x71\xf5\x75\xbf\xa8\x61\xcf\x8e\xeb\xb2\x59\xef\xcd\x33\xc7\x9a\xdb\x4a\x95\x34\x49\x9d\x6e\xce\x93\x3a\x73\xdf\x5c\x5a\xaf\x26\x75\xb6\xf5\x2c\xa9\x8b\x6f\xf0\x64\x0c\x8b\x0a\xe7\x92\x8f\x6c\x7f\x7c\x22\xe2\xd5\x4e\xa7\xf5\x97\xfa\x1a\x11\xac\xb9\x61\x84\xd0\xff\x67\xd5\x77\x71\x76\xc8\x5b\x0f\x11\xfe\x0e\x7f\x83\x6d\xeb\x87\xd6\xc3\xd3\x3e\x0f\x4b\xfc\x17\xf0\x60\xa5\x9d\x4e\xd7\x6e\x8f\xc0\xd6\xe5\x68\x7b\xec\xfa\x85\xbf\x0b\x13\x76\xc3\x0a\x4f\x35\x44\xe5\x1d\x00\x97\x2a\x72\xc1\xac\x62\x31\x0a\xe5\x9c\x0f\x06\x4c\xa6\x84\xe6\x02\x84\xa6\x02\x9c\x90\x19\xf8\x10\x72\x21\x82\xd6\x34\xb7\xc0\xa7\xd7\xda\xed\xee\x71\xba\x3d\x82\xa3\xa2\x1c\x57\xb7\xfa\xa5\x3f\xb8\x63\xab\xde\xfd\xe7\x5d\x40\x50\xa9\x28\xe7\x8c\x52\xaf\x19\x18\x03\xa0\x82\x0b\x52\x08\x4d\x3d\xf7\xb9\xe1\x54\x30\x23\x55\x08\x42\x5b\xad\x64\x10\x82\x81\x02\xa7\x55\x0e\x91\x2b\x9d\x05\x61\xa2\xcd\xb8\x88\x72\xce\x62\x82\x13\x26\xa7\x79\xe4\x5c\xe6\x5c\xe7\xd6\x67\x34\x58\x67\xa4\x34\x00\x4c\x9b\x20\x55\x54\x8e\x41\x54\xdc\x4b\xa0\x9e\x31\x9f\x5b\x06\x0e\xac\x55\x79\xae\xd4\x87\x18\x5f\x4e\x9f\xbd\x87\xe2\xa8\x1c\xd9\xea\xe6\xfe\xc0\x16\xfd\x6b\xbe\x1c\x5c\x6a\xe1\xeb\x17\x5f\x0b\xe5\x20\x69\xeb\x29\xfb\x14\x86\x50\x15\xd5\xbd\x26\xa8\x3b\x60\x43\xbf\x18\x02\xa7\x4c\xa7\x54\xa6\xdc\xdc\x20\xdb\xd5\xc4\xf7\x20\x40\xbf\xf0\xc4\x97\x83\xc3\x72\x3c\x0c\xb3\x36\x0d\xbe\xaa\x6d\x35\x21\x83\xf2\x08\x2a\xe2\xfb\x65\x05\x23\x52\x97\xc4\x1e\x1e\x8e\xca\x23\xdb\x9f\xfd\xae\x67\x7a\xc8\xf6\xee\xfd\x4f\x9a\x21\x8f\x9f\x22\xfc\x13\x7e\x8a\x7f\xc5\xbf\xe0\xef\x4f\xbb\x72\x96\x58\xe2\x0c\xe3\x12\x4e\x93\x93\x6d\x73\xe5\x23\xdc\x4d\xde\xdc\xf2\xda\x17\xf0\xe5\xe7\x36\xf8\x7d\x7c\xfd\xf5\x47\x5b\x1f\x60\x7d\xfe\x4f\x3b\xca\x6c\xfe\x27\xad\x0e\x6a\x75\x4e\x3b\xf0\x25\xfe\xd5\x78\xb2\x9b\x5c\x78\x6f\xba\x76\x3c\x99\xae\x1d\x77\x50\xf7\xdd\x27\xb9\xa0\x59\x2e\x28\x13\x54\x51\xcd\xad\x51\xd2\x78\x10\x81\x72\xca\xa8\xa2\x66\x61\x47\x50\x46\x35\x15\x92\x53\x4a\xa5\xf6\x54\x0b\x2b\x32\x16\x38\x33\x21\x67\xcc\x03\x37\x41\x67\x54\x48\x2d\x8c\x71\x41\x64\x19\x88\x60\x7d\x16\x80\xc5\x5c\x80\x94\x2a\x5a\x1e\x95\xe1\x32\x18\x97\x49\x63\xa4\x07\x00\x6b\x18\x35\xb9\xcc\x33\x07\x2e\xa8\x10\x42\x74\x9c\x72\x11\x35\xd3\x56\xc8\x48\x55\x66\x95\xcd\xb5\x37\xc2\x45\xc5\x85\x01\xcf\x82\x66\xd2\xff\x13\x71\xcb\x6c\xfe\x69\x11\xb3\x5c\x09\x9d\xf3\xdc\x53\x06\xd1\x6b\xe3\x0c\x30\x27\x79\xc8\x34\x67\x56\x2a\xed\xb5\xe6\x2a\xf7\xd2\x47\x15\x98\xa0\x94\x32\x46\x63\xae\xbc\xf4\x2c\x72\xea\x29\xe7\x94\x53\xe1\xbc\xca\x32\x6e\xa3\x57\xde\x69\x96\xf1\xc8\x75\x94\xdc\x2b\xc6\x64\x34\x60\x39\x75\x91\x49\x15\xa8\xa3\x86\x4a\x27\xa5\x0b\x52\x0a\xab\x22\x8d\xb9\x31\xb3\xf9\x9f\xe0\x1a\xe1\xfa\xb4\x0b\x6c\x89\x25\xce\x06\xa6\xab\xe7\xa6\x6b\xd3\xb5\xf3\xef\xde\x4b\xde\x9d\xe1\x8f\x00\x00\x00\xff\xff\x04\x2b\x67\xef\x00\x14\x00\x00")

func bindataGenesisDbBytes() ([]byte, error) {
	return bindataRead(
		_bindataGenesisDb,
		"bindata/genesis.db",
	)
}

func bindataGenesisDb() (*asset, error) {
	bytes, err := bindataGenesisDbBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "bindata/genesis.db", size: 5120, mode: os.FileMode(420), modTime: time.Unix(1493456163, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"bindata/genesis.db": bindataGenesisDb,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"bindata": &bintree{nil, map[string]*bintree{
		"genesis.db": &bintree{bindataGenesisDb, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

