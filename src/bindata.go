// Code generated by go-bindata.
// sources:
// bindata/genesis.db
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _bindataGenesisDb = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x57\x4d\x6f\x1c\xb5\x1b\xb7\x77\x37\xe9\xbf\x69\xa3\x2a\x52\xff\x0a\xa2\x12\xf2\x2d\x0d\xca\xb6\x7e\x1b\xdb\x53\x09\xa9\xdb\x12\x51\x94\x50\x42\x9a\x56\xed\x29\xf2\xcb\xe3\x64\x94\xdd\x9d\xb0\x33\x1b\x75\x0f\x1c\xb6\x55\xb9\x23\xbe\x48\x8f\x7c\x02\x6e\x9c\xfa\x01\xf8\x0c\x48\x1c\x90\xb8\xa0\x99\x4d\xcb\xa6\x6f\x01\x5a\x0a\x42\xf9\x69\x65\xaf\x1f\x7b\x7e\x7e\x7e\xe3\xc7\x7e\xc6\xb7\xbe\x58\xcf\x4a\x20\x31\x1f\xf4\x6c\x49\x04\x6a\x20\x8c\xd1\x55\x42\x10\x42\x67\x11\x42\xff\x43\xbf\xa3\x89\x10\x6a\x4d\xb5\x31\x3a\x1e\x67\x51\xfb\xa7\xef\x66\xaa\xc1\xf8\xd7\xaa\x7d\x6a\x52\x9d\xe0\xdf\x81\xd9\xc6\x7c\x55\xa2\x35\x84\xbf\xc5\x5f\x61\x8b\x1e\xa3\xbb\x68\xed\x2f\x92\x9d\x99\x6d\x5e\x38\x77\x07\x06\x45\x96\xf7\xd9\x9d\x99\x56\x7b\xbc\x70\x7d\x00\xb6\xcc\x07\x1b\x43\xd7\xcd\xfc\x1a\x8c\xd8\x15\x2b\x3c\xd5\x10\x95\x77\x00\x5c\xaa\xc8\x05\xb3\x8a\xc5\x28\x94\x73\x3e\x18\x30\x89\x12\x9a\x0b\x10\x9a\x0a\x70\x42\x26\xe0\x43\x48\x85\x08\x5a\xd3\xd4\x02\x1f\x5f\x6a\xb5\x3a\x0f\xda\x1b\x03\x38\xc8\xf2\x61\x71\xad\x9b\xfb\xbd\x1b\xb6\xd8\xbd\x95\xed\xf4\x6d\x39\x1c\x80\xa0\x52\x51\xce\x19\xa5\x5e\x33\x30\x06\x40\x05\x17\xa4\x10\x9a\x7a\xee\x53\xc3\xa9\x60\x46\xaa\x10\x84\xb6\x5a\xc9\x20\x04\x03\x05\x4e\xab\x14\x22\x57\x3a\x09\xc2\x44\x9b\x70\x11\xe5\x84\xc5\x04\x27\x4c\x4a\xd3\xc8\xb9\x4c\xb9\x4e\xad\x4f\x68\xb0\xce\x48\x69\x00\x98\x36\x41\xaa\xa8\x1c\x83\xa8\xb8\x97\x40\x3d\x63\x3e\xb5\x0c\x1c\x58\xab\xd2\x54\xa9\xf7\x9b\xcd\x0b\xed\xc3\xf7\x90\x1d\xe4\x03\x5b\x5c\xdd\xe9\xd9\xac\x7b\xc9\xe7\xbd\xf3\x8d\xe6\xe5\xf9\x17\xa4\xec\xe1\x96\x1e\xb3\x4f\xa0\x0f\x45\x56\xdc\xac\x45\xdd\x00\x1b\xba\x59\x1f\x38\x65\xba\x4d\x65\x9b\x9b\x2b\x64\xa3\x18\xf9\x5d\x08\xd0\xcd\x3c\xf1\x79\x6f\x3f\x1f\xf6\x03\xc9\xfa\x04\x7c\x51\xda\x62\x44\x7a\xf9\x01\x14\xc4\x77\xf3\x02\x06\xa4\xcc\x89\xdd\xdf\x1f\xe4\x07\xb6\x5b\xfd\x2f\x2b\x7f\xc8\xc6\xd6\xad\x8f\xe7\xaa\xf5\xc7\x8f\x10\xfe\x19\xff\x88\xbf\xc7\x8f\xf1\x37\xf8\xd1\x5b\x0e\xb2\x13\x1c\x87\x33\xcd\x0b\xf8\x70\xe3\xcc\x7e\xd0\xec\xe0\x57\x47\x77\xeb\xff\xcd\xcb\x2f\x76\x37\xde\x6b\xea\xd3\x2f\x0d\x98\xf3\xcd\x36\x7e\x7e\x13\xce\x54\xd3\x1d\x1a\x9b\xf3\xf5\x41\xbe\x8c\xaa\xdf\x6b\xf1\x70\x0b\x9f\x39\x37\x5e\x78\x30\x1a\x2f\x3c\x58\x46\x9d\x37\xdf\xc9\x82\x26\xa9\xa0\x4c\x50\x45\x35\xb7\x46\x49\xe3\x41\x04\xca\x29\xa3\x8a\x9a\x29\x8b\xa0\x8c\x6a\x2a\x24\xa7\x94\x4a\xed\xa9\x16\x56\x24\x2c\x70\x66\x42\xca\x98\x07\x6e\x82\x4e\xa8\x90\x5a\x18\xe3\x82\x48\x12\x10\xc1\xfa\x24\x00\x8b\xa9\x00\x29\x55\xb4\x3c\x2a\xc3\x65\x30\x2e\x91\xc6\x48\x0f\x00\xd6\x30\x6a\x52\x99\x26\x0e\x5c\x50\x21\x84\xe8\x38\xe5\x22\x6a\xa6\xad\x90\x91\xaa\xc4\x2a\x9b\x6a\x6f\x84\x8b\x8a\x0b\x03\x9e\x05\xcd\xa4\x7f\x1b\xba\x65\x32\x39\x5a\x62\x92\x2a\xa1\x53\x9e\x7a\xca\x20\x7a\x6d\x9c\x01\xe6\x24\x0f\x89\xe6\xcc\x4a\xa5\xbd\xd6\x5c\xa5\x5e\xfa\xa8\x02\x13\x94\x52\xc6\x68\x4c\x95\x97\x9e\x45\x4e\x3d\xe5\x9c\x72\x2a\x9c\x57\x49\xc2\x6d\xf4\xca\x3b\xcd\x12\x1e\xb9\x8e\x92\x7b\xc5\x98\x8c\x06\x2c\xa7\x2e\x32\xa9\x02\x75\xd4\x50\xe9\xa4\x74\x41\x4a\x61\x55\xa4\x31\x35\x66\xae\xce\xcd\x4f\x10\x7e\xf2\x8e\x62\xfd\x04\x7f\x37\xc6\x73\xb3\xe3\x85\xf1\xc2\xe9\x63\x43\xb5\xfa\xbe\x9b\xc7\xbf\xa0\x06\xbe\x8b\xf0\x5d\xfc\x03\x6e\xe3\xf6\x3f\xed\xfc\x7f\x05\x05\x3e\xb5\xb8\xb8\x88\xc7\xab\xa5\x75\x5d\xd8\xee\x41\x69\xeb\xa2\x71\x7d\x73\xb5\xb3\xb5\x4a\xb6\x3a\xd7\xd6\x57\x49\x6d\x22\x17\xe7\x08\x21\x64\x0f\x46\xe4\x29\xee\x74\x36\xaf\xdf\xe8\x6c\x92\x9b\x9f\x6f\x91\x9b\xb7\xd7\xd7\xc9\xc6\xe6\xa7\x9f\x75\x36\xef\x91\xb5\xd5\x7b\x2b\xf5\xe8\x03\xdb\x1d\xc2\xd1\xd1\x73\xcb\xcb\x8d\xd9\xc5\x8f\x16\x31\xca\xfa\x01\xee\x17\x5f\x76\xb3\x12\xb6\xed\xb0\xcc\xeb\xf6\xf6\xc4\x09\x56\x57\xcd\xa7\xdf\xf6\xd5\xf9\xdf\x40\x1f\x22\x74\xbb\x2a\x5e\x87\xe5\xd6\x6b\xc9\xf7\x60\x54\x6c\xb3\xba\x9a\x79\x78\xb1\x59\xab\xff\xfa\xf2\x44\x7d\xdd\x57\x15\xad\xa3\xea\x2b\xd3\xa1\xfa\x7c\x9f\x1c\xc1\x11\xf9\x2b\x13\x5b\xbb\x4d\x96\x3a\x4b\xd5\x5d\x85\xd8\x10\xb2\xfe\xce\x0a\x59\xda\x9c\xb4\x07\x70\x90\xef\x65\xfd\x9d\x9a\x6b\x7f\xe8\xf6\x60\xb4\xbd\x6b\x8b\xdd\x97\xbe\xcd\x95\x09\x57\xd6\x27\xe5\xee\xb3\xab\xcf\x52\x39\xda\x87\x2b\xbb\x70\x7f\x69\x8a\x83\xbc\x72\x45\x0e\x39\x76\xe1\x7e\x1b\xfa\x3e\x0f\x10\xea\xc7\x8a\x6c\xe7\x8f\x4c\x5d\xd8\xde\xb3\x89\x6d\x31\xed\xf0\x53\x96\x49\xba\x7f\xd5\xe4\xf5\xa8\x6a\x1d\x83\x2d\xed\x73\x2e\x4e\x3a\xa7\x02\x86\x5c\x9c\xe2\x5f\x99\x76\x71\x79\xae\xce\xfa\xc7\xa6\xac\x37\x4f\x7a\xef\x66\xd3\x9d\xe0\x4f\xe3\xb7\x00\x00\x00\xff\xff\x51\xdd\xa1\x4b\x00\x10\x00\x00")

func bindataGenesisDbBytes() ([]byte, error) {
	return bindataRead(
		_bindataGenesisDb,
		"bindata/genesis.db",
	)
}

func bindataGenesisDb() (*asset, error) {
	bytes, err := bindataGenesisDbBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "bindata/genesis.db", size: 4096, mode: os.FileMode(420), modTime: time.Unix(1493538129, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"bindata/genesis.db": bindataGenesisDb,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"bindata": &bintree{nil, map[string]*bintree{
		"genesis.db": &bintree{bindataGenesisDb, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

